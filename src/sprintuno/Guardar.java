/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sprintuno;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static sprintuno.visualizarDiagrama.getUMLContentFromDatabase;

/**
 *
 * @author MI EQUIPO
 */
public class Guardar extends javax.swing.JPanel {

    private File archivo;
    /**
     * Creates new form Guardar
     */
    public Guardar() {
        initComponents();
    }
     public void cancelar(){
        jLabel1.setText("");
        archivo = null;
        jTextArea1.setText("");
    }
    private boolean esArchivoValido(File archivo) {
    String nombreArchivo = archivo.getName();
    return nombreArchivo.length() >= 4 && nombreArchivo.substring(nombreArchivo.length() - 4).equalsIgnoreCase(".mdj");
    }
      private byte[] convertir(File archivo){
        byte[] res = null;
        if(archivo != null){
            FileInputStream fis = null;
                try {
                    fis = new FileInputStream(archivo);
                    res = new byte[(int) archivo.length()];
                    fis.read(res);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fis.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
        return res;
    }
     private void guardarArchivoEnBD(String nombreArchivo, byte[] contenido) {
        Connection cn = Conexion.getConnection(); // Llama a tu clase Conexion para obtener la conexión
        
        String sql = "INSERT INTO archivo (nombre_archivo, contenido) VALUES (?, ?)";

        try (PreparedStatement pstmt = cn.prepareStatement(sql)) {
            pstmt.setString(1, nombreArchivo);
            pstmt.setBytes(2, contenido);
            pstmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage());
        } finally {
            try {
                if (cn != null) cn.close(); // Cierra la conexión después de usarla
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }
    public String visualizarDiagrama() throws SQLException{
        byte[] contenidoBytes = convertir(archivo);
        return new String(contenidoBytes);  // Convertidor de bytes a string
    }
    public void subir () throws SQLException{
        String umlContent = visualizarDiagrama();
        jTextArea1.setEditable(false);
        jTextArea1.setText(umlContent);  // Insertar el contenido UML pasado como parámetro
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnValidar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText(" ");
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Guardar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(51, 153, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cargando.png"))); // NOI18N
        jButton5.setText("Subir");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("Editar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Enviar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnValidar.setText("Validar");
        btnValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Vista previa del UML");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnValidar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnValidar)
                        .addGap(73, 73, 73)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        cancelar();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (archivo != null && esArchivoValido(archivo)) {
            byte[] contenido = convertir(archivo);  // Supongo que ya tienes este método
            guardarArchivoEnBD(archivo.getName(), contenido);
            JOptionPane.showMessageDialog(this, "Archivo guardado correctamente en la base de datos.");
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un archivo válido antes de guardar.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        jButton5.setBackground(new Color(51,153,255));
    }//GEN-LAST:event_jButton5MouseEntered

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser chooser = new JFileChooser();
        int res = chooser.showOpenDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            archivo = chooser.getSelectedFile();  // Asignamos el archivo seleccionado

            if (archivo != null) {
                // Mostramos el icono y la ruta del archivo seleccionado
                jLabel1.setIcon(chooser.getIcon(archivo));
                jLabel1.setText(archivo.getPath() + " " + archivo.getName());
            } else {
                JOptionPane.showMessageDialog(this, "No se seleccionó ningún archivo.");
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(archivo != null){
            cancelar();
            String[] opciones = {
                "lucidchart - https://www.lucidchart.com/pages/es/ejemplos/diagrama-uml", // Editor en línea para UML
                "creately - https://creately.com/es/lp/herramienta-de-diagrama-uml/", // Herramienta de diagramación en línea
                "gitmind - https://gitmind.com/es/herramienta-gratis-diagrama-uml.html" // Herramienta de diagramación gratuita
            };

            // Mostrar el diálogo de selección
            String seleccion = (String) JOptionPane.showInputDialog(
                this,
                "Selecciona un sitio web para editar tu diagrama UML:",
                "Elegir Editor UML",
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0] // Valor por defecto
            );

            // Abrir el sitio web seleccionado en el navegador
            if (seleccion != null) {
                try {
                    // Extraer la URL del texto seleccionado
                    String url = seleccion.split(" - ")[1];
                    java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error al abrir el sitio web: " + e.getMessage());
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione un archivo");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarActionPerformed
        if (archivo == null) {
            // Si no se ha seleccionado ningún archivo, mostramos un mensaje de error
            JOptionPane.showMessageDialog(this, "Seleccione un archivo antes de validar.");
        } else if (esArchivoValido(archivo)) {
            // Si el archivo es válido, permite la subida
            try {
                subir();
                JOptionPane.showMessageDialog(this, "Archivo válido y cargado correctamente.");
            } catch (SQLException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error al subir el archivo.");
            }
        } else {
            // Si el archivo no es válido, muestra un mensaje de error
            JOptionPane.showMessageDialog(this, "El archivo no es válido. Asegúrese de que sea un archivo .mdj");
        }
    }//GEN-LAST:event_btnValidarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnValidar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}

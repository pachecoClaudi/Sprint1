/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sprintuno;
import java.sql.SQLException ; 
import java.sql.Connection ; 
import java.sql.PreparedStatement ; 
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/*
 *
 * @author Giuliana
 */
public class Generador extends javax.swing.JPanel {
    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnGenerarCodigo = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        btnGenerarCodigo.setText("Generar codigo");
        btnGenerarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarCodigoActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Java", "Python", "JavaScript", "PHP", "Ruby", "Swift", "C#" }));

        jButton2.setText("Buscar Diagrama");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        jButton3.setText("Guardar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancelar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenerarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4)))
                        .addGap(36, 36, 36))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnGenerarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton3))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private int obtenerId(){
        int res = 0;
        String sql = "SELECT id_archivo FROM archivo WHERE nombre_archivo = ?";
        Connection cn = Conexion.getConnection();
        
        try{
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setString(1, txtBuscar.getText());
            ResultSet rs = ps.executeQuery();
                        if (rs.next()) {
                res = rs.getInt("id_archivo");  // Obtiene el id_archivo
            } else {
                JOptionPane.showMessageDialog(null, "Archivo no encontrado");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error en la consulta: " + e.getMessage());
        }  finally {
            try {
                if (cn != null) cn.close();  // Cierra la conexión
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + e.getMessage());
            }
        }
        
        return res;
    }
    
    
    private void btnGenerarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarCodigoActionPerformed
        // TODO add your handling code here:                                              
    Connection cn = Conexion.getConnection(); // Llama a tu clase Conexion para obtener la conexión
    int archivoId = obtenerId();//Integer.parseInt(txtArchivoId.getText()); // Obtiene el ID del archivo de un campo de texto
    String lenguaje = jComboBox2.getSelectedItem().toString();//comboBoxLenguaje.getSelectedItem().toString(); // Obtiene el lenguaje seleccionado desde un combo box
    String sql = "SELECT verificar_codigo_generado(?, ?);"; // Consulta para llamar a la función

    try {
        PreparedStatement ps = cn.prepareStatement(sql);
        ps.setInt(1, archivoId); // Establece el id del archivo
        ps.setString(2, lenguaje); // Establece el lenguaje elegido
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            String codigoGenerado = rs.getString(1); // Obtiene el código generado
            jTextArea1.setText(codigoGenerado); // Muestra el código en el área de texto
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el código para el archivo y lenguaje proporcionado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        rs.close();
        ps.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al generar el código: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (cn != null && !cn.isClosed()) {
                cn.close(); // Cierra la conexión a la base de datos
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnGenerarCodigoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    Connection cn = Conexion.getConnection(); // Llama a tu clase Conexion para obtener la conexión
    String nombre = txtBuscar.getText(); // Obtiene el texto del campo de búsqueda
    String sql = "SELECT buscar_archivo(?);"; // Consulta que llama a la función almacenada
    
    try {
        PreparedStatement ps = cn.prepareStatement(sql);
        ps.setString(1, nombre); 
        ResultSet rs = ps.executeQuery();     
        if (rs.next()) {
            String resultado = rs.getString(1);  
            if (resultado != null) {
                JOptionPane.showMessageDialog(this, "Archivo encontrado.", "Archivo encontrado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No hay ningún archivo con ese nombre en la base de datos.", "Archivo no encontrado", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay ningún archivo con ese nombre en la base de datos.", "Archivo no encontrado", JOptionPane.INFORMATION_MESSAGE);
        } 
        rs.close();
        ps.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al buscar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (cn != null && !cn.isClosed()) {
                cn.close(); // Cierra la conexión a la base de datos
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Connection cn = Conexion.getConnection(); 
        String nombre = txtBuscar.getText(); 
        String nombreArchivo = ""; 
        String sqlBuscar = "SELECT nombre_archivo FROM archivo WHERE nombre_archivo = ?";

        try {
            PreparedStatement psBuscar = cn.prepareStatement(sqlBuscar);
            psBuscar.setString(1, nombre); 
            ResultSet rsBuscar = psBuscar.executeQuery();     
            if (rsBuscar.next()) {
                nombreArchivo = rsBuscar.getString(1); // Almacena el nombre del archivo encontrado
            } else {
                JOptionPane.showMessageDialog(this, "No hay ningún archivo con ese nombre en la base de datos.", "Archivo no encontrado", JOptionPane.INFORMATION_MESSAGE);
                return; // Termina la ejecución si no se encuentra el archivo
            } 
            rsBuscar.close();
            psBuscar.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al buscar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

    
        String sqlInsert = "INSERT INTO codigogenerado (codigo, lenguaje, id_archivo) VALUES (?, ?, ?)";
        String lenguaje = (String) jComboBox2.getSelectedItem();

        try {
            // Comprobar si ya existe un archivo con el mismo nombre
            PreparedStatement checkStmt = cn.prepareStatement("SELECT COUNT(*) FROM codigogenerado WHERE codigo = ?");
            checkStmt.setString(1, nombreArchivo);
            ResultSet rs = checkStmt.executeQuery();
            int count = 0;
            if (rs.next()) {
                count = rs.getInt(1);
            }

            // Si ya existe, agrega un número al final del nombre
            String nombreParaGuardar = nombreArchivo;
                if (count > 0) {
                int i = 1;
                while (count > 0) {
                    nombreParaGuardar = nombreArchivo + "(" + i + ")";
                    checkStmt.setString(1, nombreParaGuardar);
                    rs = checkStmt.executeQuery();
                    if (rs.next()) {
                        count = rs.getInt(1);
                    }
                    i++;
                }
            }

            rs.close();
            checkStmt.close();

             // Inserción del nuevo registro
            PreparedStatement ps = cn.prepareStatement(sqlInsert);
            ps.setString(1, nombreParaGuardar); 
            ps.setString(2, lenguaje); 
            ps.setInt(3, 1); 
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this, "Archivo guardado como: " + nombreParaGuardar, "Éxito", JOptionPane.INFORMATION_MESSAGE);
            ps.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (cn != null && !cn.isClosed()) {
                        cn.close(); // Cierra la conexión a la base de datos
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        txtBuscar.setText("");
        jComboBox2.setSelectedIndex(0);
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarCodigo;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
